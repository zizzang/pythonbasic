# Call by Reference (*값*에 의한 인수 전달) #####Call by Value (*값*에 의한 호출) 이란 것도 있음
# 함수를 호출할 때, 변수를 전달하는 경우가 많다.
# 내가 전달하는 변수의 무엇이 함수로 전달될까
# 모든 프로그래밍 언어에서는 혼란을 막기 위하여 변수의 값만이 전달된다.

# 해쉬코드
# 객체를 힙이라는 영역에다가 16진수의 형태로 메모리의 주소가
# ex)  > 0xabc190 > 10진수 형태의 정수값(유니크)

#############################################################################################
# Call by Value
# 숫자나 문자열은 변경 불가능한 객체(immutable object) 이기 때문이다.
# 숫자나 문자열을 변경하게 되면 새로운 객체가 생성된다. 


# 불가변성 객체는 hip안의 인자 값이 바뀌지 않기 때문에
# 아래와 같은 코드는 k값을 11로 바꿀 수 없다.
# def modify(n):
#     n = n + 1
    
# k = 10
# print(k)
# modify(k)
# print(k)


# 문자열도 마찬가지다.

def modify(s):
    s += "To You"

msg = "Happy Birthday"
print(msg)
modify(msg)
print(msg)

#############################################################################################
# Call by Reference
# 리스트는 변경 가능 객체(mutable object)이다.
# 리스트의 경우에 리스트의 참조값(= 메모리의 주소 값)이 전달된다. 함수에서 참조값을 이용하여 리스트를 변경하면 리스트는
# 변경 가능하기 때문에 새로운 객체를 생성하지 않고 기존의 객체가 변경되는 것이다.

def modify2(li):
    li += [100,200]

list = [1,2,3,4,5]
print(list)
modify2(list)
print(list)