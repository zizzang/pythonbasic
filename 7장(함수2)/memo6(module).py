# 모듈 이란
#  함수나 변수들을 모아 놓은 파일을 모듈(module)이라고 한다.
#  모듈 안에 있는 함수들은 import 문장으로 다른 모듈을 포함될 수 있다.
# 모듈 중에서 main 모듈은 최상위 수준에서 실행되는 스크립트를 의미한다.

# 우리가 파이썬 인터프리터를 종료하고 다시 들어가면, 이전에 정의해 놓았던 함수와 변수들의
# 정의는 전부 사라지게된다. 따라서 우리가 어느 정도 이상의 복잡한 프로그램을 작성하려는 경우,
# 인터프리터를 사용하여서 한줄씩 식별하여 실행하는 것보다 텍스트 편집기를 사용하여서 파일을 작성하고
# 인터프리터로 해당 파일을 실행 하는것이 더 낫다. 또 프로그램이 길어지면, 보수를 쉽게 하기 위해 여러 개의
# 파일로 분할할 수 있다. 또한 파일을 사용하면 한번 작성한 편리한 함수를 복사하지 않고 여러 프로그램에서
# 사용할 수 있다.


# 모듈의 활용
# 파일 이름은 파이썬 모듈 이름에 .py 확장자를 붙이면 된다. 모듈 안에서는 모듈의 이름은 _name_ 의 값(문자열)으로
# 접근이 가능하다. 예를 들어 fibo.py 파일에 텍스트 편집기를 사용하여 다음과 같은 내용을 저장하였다고 하자.
# 파일 이름은 파이썬 모듈 이름은 __name__의 값(문자열)으로 접근이 가능하다. 예를 들어 fibo.py 파일에 텍스트
# 편집기를 사용하여 다음과 같은 내용을 저장하였다고 하자.


# 함수를 사용한 프로그램 설계
# 문제를 한 번에 해결하려고 하지 말고 더 작은 크기의 문제들로 분해한다. 문제가 충분히 작아질 떄까지 계속해서 분해한다.
# 파이썬은 main 함수가 존재하지 않는다.
# 그렇다면 
# 1. 들여쓰기를 통해 코드 실행의 레벨을 결정한다.
# 2. main이 존재하지 않는다.
# 3. __name__는 현재 모듈의 이름을 담고 있는 내장 전역변수이다. 
# 4. 모듈에 if __name__=="__main__" 이라는 조건문을 넣어주고 그 아래는 직접 실행시켰을 때만 실행되길 원하는 코드들을
# 넣어주는 것으로 생각하면 쉬울 것이다. ( 뭔말 ?)
# 함수들은 특징적인 한 가지 작업(기능)만을 맡아야 한다. 하나의 함수가 여러 가지 작업을 하면 안 된다.
# 다른 것과 구별되는 한가지의 작업만을 하여야한다.
# 만약 함수 안에서 여러 작업들이 섞여 있다면 각각을 다른 함수들로 분리하여야 한다. 이런 식으로 함수를
# 사용하게 되면 함수들을 작업별로 분류할 수 있어서 소스 코드의 가독성이 높아진다.