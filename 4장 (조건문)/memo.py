# 조건식 뒤에는 콜론(:)이 존재
# (:) 은 "문장이 아직 끝나지 않았다" 라고 해석

# x == y , x와 y가 같은가 ?
# x != y , x와 y가 다른가 ?
# x > y , x가 y보다 큰가?
# x < y , x가 y보다 작은가?
# x >=  y , x가 y 보다 크거나 같은가 ?
# x <= y , x가 y 보다 작거나 같은가 ?


# 조건식에는 변수를 사용할 수 있다. 즉 (X > y)와 같은 수식이 가능
# 변수 X가 Y보다 크면 이 수식의 값은 1
# 변수 X가 Y보다 작으면 이 수식의 값은 0
# 통상 프로그래밍 언어는 0은 False 이고 0이외의 양수는 True로 본다. 
# 하여 양수의 대표값인 1이 true가 되는 것이다.



# 1) 부울(bool) 변수
# 참과 거짓을 저장하는 변수를 만들 수 있는데 이러한 변수를 부울(bool)변수 라고 칭한다.
# 정수, 실수, 문자열 변수는 많은 값을 가지지만 부울 변수는 딱 2가지 True, False라는 값만 가진다.
# 이 부울 변수는 프로그래밍에서는 플래그(flag)변수로 많이 사용된다.
# 타 언어와 다르게 true 가 아닌 True 를 써야한다는 차이점이 있다.
# --------------------------------------------------------------------------------------------

# 2) 블록 만드는 방법
# :으로 문장이 끝나지 않았음을 의미함, 그리고 if문 아래 코드는 동일한 개수의 공백을 갖고 있어야한다
# ex) 아래와 같이 하면 안됨 
#     print(xx)
#   print(xx)

# 3) 블록안에 새로운 블록 만드는 것도 가능 (중첩 if문)
# if 안에 if문, else 안에 if문 등등 가능


# 4) 논리 연산자
# 논리 연산자(logical operator)는 여러 개의 조건을 조합하여 참인지 거짓인지를 따질 때 사용한다.
# AND(논리곱), OR(논리합), NOT(논리부정)이 있다.
# x and y > AND 연산, x와 y가 모두 참이면 참, 그렇지 않으면 거짓
# x or y > OR 연산, x나 y중에서 하나만 참이면 참, 모두 거짓이면 거짓
# not x > NOT 연산, x가 참이면 거짓, x가 거짓이면 참

# 주의점은 논리 연사자를 작성할 때 AND연산자의 경우, 여러 개의 조건 중에서 처음 조건이 거짓이라면
# 다른 조건들은 검사조차 하지 않는다 라는 점이다. 그 이유는 첫 번째 조건이 어차피 거짓이기 떄문에 나머지 조건
# 계산의 필요성이 없기 때문에

# 논리 부정 연산자는 논리 부정을 나타내는 not 연산자인데, 조건이 참이면 전체 수식을 거짓으로 만들고, 조건이 거짓이면
# 전체 수식 값을 참으로 만들어 준다. ex) not(1==0)는 참이 된다. (1==0)은 원래 거짓이지만 not가 참으로 만들어 주는
# 것이다.



# 5) if ~ elif 문
# 종종 우리는 조건에 따라서 다중으로 분기되는 결정을 내려야 하는 경우가 있다.
# 중요한 점은 if ~ elif 구문에서는 다중 조건 중 하나만 만족하게 된다면 그 이후는 실행되지 않는다 라는 점이다.
# 그렇기 때문에 if 문 보다 if ~ elif 문이 cpu 오버헤드가 적다

# if
# elif
# elif
# elif
# else  > 이런 if ~ elif 구문에서 마지막 else 옆에는 조건식이 들어가면 안된다. *else는 구문 자체가 없어도 되긴하다.


# 6) 중첩 if ~ else 문
